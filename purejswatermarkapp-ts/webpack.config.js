const webpack = require("webpack");
const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
// const ForkTsCheckerWebpackPlugin = require("fork-ts-checker-webpack-plugin");
const { CleanWebpackPlugin } = require("clean-webpack-plugin");
const BundleAnalyzerPlugin = require("webpack-bundle-analyzer").BundleAnalyzerPlugin;
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CopyWebpackPlugin = require("copy-webpack-plugin");
// const WriteFilePlugin=require("write-file-webpack-plugin");

const analyzeBundle = process.env.ANALYZE === "true";
const shouldUseSourceMap = process.env.GENERATE_SOURCEMAP !== "false";
const postcssNormalize = require("postcss-normalize");

//add configuration using MML_BACKEND_URI if available, otherwise, use http://localhost:3001
//const backendUri = process.env.MML_BACKEND_URI || "http://localhost:3001";
//To run on heroku with heroku backend
//    heroku config:set MML_BACKEND_URI="https://mml-test-back.herokuapp.com"
//To run on local machine with heroku backend
//    export  MML_BACKEND_URI="https://mml-test-back.herokuapp.com"
//    npm run dev
//To run on local machine with localhost as backend
//    export  MML_BACKEND_URI=""
//    npm run dev

module.exports = () => {
	//console.log("backend URI is: ", backendUri);
	console.log("server mode is", process.env.NODE_ENV === "production" ? "production" : "development");

	const isEnvDevelopment = process.env.NODE_ENV === "development";
	const isEnvProduction = process.env.NODE_ENV === "production";
	// common function to get style loaders
	return {
		mode: isEnvProduction ? "production" : "development",
		// devtool: "cheap-module-eval-source-map",
		devtool: isEnvProduction ? "source-map" : "eval-source-map",
		entry: { muminle: "./src/index.tsx" },
		output: {
			path: path.resolve(__dirname, "dist"), //output in docs folder
			filename: isEnvProduction ? "[name].[contenthash].js" : "[name].[hash].js",
			// filename: "bundle.js",
		},
		resolve: {
			extensions: [".ts", ".tsx", ".js", ".jsx"],
			modules: ["node_modules"],
		},
		module: {
			rules: [
				{
					test: /\.ts(x?)$/,
					loader: "ts-loader",
					exclude: /node_modules/,
					options: {
						// We use ForkTsCheckerWebpackPlugin for typechecking
						transpileOnly: true,
					},
				},
				// { test: /\.json$/, loader: "json-loader" },
				{
					test: /\.jsx?$/,
					loader: "babel-loader",
					exclude: /node_modules/,
				},
				//modular scss, sass files
				{
					test: /\.module\.s[ac]ss$/i,
					use: [
						// Creates `style` nodes from JS strings in dev and extract it to
						// another file in production
						isEnvProduction ? MiniCssExtractPlugin.loader : "style-loader",
						{
							loader: "@teamsupercell/typings-for-css-modules-loader",
							options: {
								banner: "// autogenerated by typings-for-css-modules-loader.",
							},
						},

						//Tom Long added css-customs-loader here before css-loader
						{
							loader: require.resolve("css-customs-loader"), //only works with postcss-loader@3.0.0
							options: {
								onlyLocals: false,
							},
						},
						// Translates CSS into CommonJS with modules
						{
							loader: "css-loader",
							options: {
								modules: {
									mode: "local",
									localIdentName: "[name]-[local]-[hash:base64:6]",
								},
								localsConvention: "camelCase",
							},
						},
						//postcss loader
						{
							// Options for PostCSS as we reference these options twice
							// Adds vendor prefixing based on your specified browser support in
							// package.json
							loader: "postcss-loader",
							options: {
								// Necessary for external CSS imports to work
								// https://github.com/facebook/create-react-app/issues/2677
								ident: "postcss",
								plugins: () => [
									require("postcss-flexbugs-fixes"),
									require("postcss-preset-env")({
										autoprefixer: {
											flexbox: "no-2009",
										},
										features: {
											"nesting-rules": true,
											"custom-properties": true, // already included in stage 2+
											"custom-media-queries": true, // oooh, what's this? :)
										},
										stage: 3,
									}),
									// Adds PostCSS Normalize as the reset css with default options,
									// so that it honors browserslist config in package.json
									// which in turn let's users customize the target behavior as per their needs.
									postcssNormalize(),
								],
								sourceMap: isEnvProduction && shouldUseSourceMap,
							},
						},
						// Compiles Sass to CSS
						"sass-loader",
					],
				},
				//---for non-modular scss, use regular scss compiling=====
				{
					test: /\.s[ac]ss$/i,
					exclude: /\.module\.s[ac]ss$/i,
					use: ["style-loader", "css-loader", "sass-loader"],
				},
				// file loader
				{
					test: /\.(png|svg|jpg|gif)$/,
					use: ["file-loader"],
				},
				// {
				// 	test: /\.(png|svg|jpg|gif)$/,
				// 	exclude: [/\.(js|mjs|jsx|ts|tsx)$/, /\.html$/, /\.json$/],
				// 	loader: require.resolve('file-loader'),
				// 	// Exclude `js` files to keep "css" loader working as it injects
				// 	// its runtime that would otherwise be processed through "file" loader.
				// 	// Also exclude `html` and `json` extensions so they get processed
				// 	// by webpacks internal loaders.
				// 	options: {
				// 		// name: "static/media/[name].[hash:8].[ext]",
				// 	},
				// },
			],
		},

		//this is only for devServer webpack-dev-server
		devServer: {
			contentBase: "./docs",
			// proxy: {
			// 	"/api": {
			// 		target: backendUri,
			// 		pathRewrite: {
			// 			"^/api": "",
			// 		},
			// 		changeOrigin: true,
			// 		secure: isEnvProduction ? true : false, // true if under production mode
			// 	},
			// },
			historyApiFallback: true,
			overlay: true,
			stats: "minimal",
			writeToDisk: true, //by default webpack-dev-server does not write bundle.js to output dir
			//alternatively, you may use "write-file-webpack-plugin" package
		},

		optimization: {
			splitChunks: {
				chunks: "all",
			},
		},
		plugins: [
			new webpack.DefinePlugin({
				//this is plugin for building global constants
				"process.env": {
					//so that we can use process.env.*** below in our source codes
					NODE_ENV: JSON.stringify(process.env.NODE_ENV),
					//ML_BACKEND_URI: JSON.stringify(backendUri),
				},
			}),
			new webpack.WatchIgnorePlugin([/s[ac]ss\.d\.ts$/]),
			//copy the following static content over to dist folder
			new CopyWebpackPlugin({
				patterns: [
					{
						from: "docs",
						// to: dist, //by defualt is to copy docs/* to dist/*
						globOptions: {
							ignore: ["**/index.html"], //ignore the index.html file in docs
						},
					},
				],
			}),
			//this will use the index.html as entry and inject bundle.js to this template file
			//and copy it to output dir
			new HtmlWebpackPlugin({ template: "docs/index.html" }),
			// //this will check all types while compiling
			// //for mixed JS and TypeScript progrmaming, better turn this off
			// //to stricktly enforce TypeScript, turn this on
			// new ForkTsCheckerWebpackPlugin({
			// 	// For the dev server overlay to work
			// 	async: false,
			// }),
			new CleanWebpackPlugin(), //clean the output folder
			isEnvProduction ? false : new webpack.HotModuleReplacementPlugin(),
			analyzeBundle ? new BundleAnalyzerPlugin() : false,
			new MiniCssExtractPlugin({
				filename: isEnvProduction ? "[name]-[contenthash].css" : "[name].css",
			}),
		].filter(Boolean),
	};
};
